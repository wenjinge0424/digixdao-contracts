#!/usr/bin/env ruby

require 'ethereum'
require 'active_support'
require 'active_support/core_ext'
require 'colorize'
require 'tty'
require 'pry'
require 'securerandom'

base_dir = ENV['PWD']
project = Ethereum::ProjectInitializer.new("#{base_dir}/contracts/*.sol", true)
$ethereum_client = Ethereum::HttpClient.new("localhost", "8545")
$ipc_client = Ethereum::IpcClient.new("#{ENV['HOME']}/Library/Ethereum/geth.ipc")
$eth = $ethereum_client
$formatter = Ethereum::Formatter.new
$f = $formatter
environment = ARGV[0] || "development"
pi_million = (Math::PI * 1_000_000).to_i

project.contracts.each do |contract|
  contract.build($ethereum_client)
end

if environment == "development"
  coinbase = $ethereum_client.coinbase["result"]
end

if environment == "staging"
  coinbase = "0xdb7ee609d57ef548b929dd26117b4d8043229e67"
end

if environment == "production"
  coinbase = "0x4366ddc115d8cf213c564da36e64c8ebaa30cdbd"
end

gas_price = $formatter.to_wei(20, 'shannon')
config = Config.new
config.as(coinbase)
config.set_gas(pi_million)
config.set_gas_price(gas_price)
puts "Deploying Configuration".colorize(:light_magenta)
config.deploy_and_wait(120)

if environment == "production"
  march_thirty =  DateTime.parse("March 30, 2016 00:00 GMT")
  period_one = (march_thirty).to_i
  period_two = (period_one + 8.days).to_i
  period_three = (period_two + 8.days).to_i
  end_date = (period_three + 14.days).to_i
  goal = 500_000
  badge_cost = 15_000
  cap = 5_500_000
else
  period_one = (DateTime.now.utc + 2.minutes).to_i
  period_two = (period_one + 2.minutes).to_i
  period_three = (period_two + 1.minutes).to_i
  end_date = (period_three + 1.minutes).to_i
  goal = 500_000
  badge_cost = 15_000
  cap = 5_500_000
end

sale_amount = 1_700_000
founders_amount = 300_000

bar = TTY::ProgressBar.new("Configuring DAO [:bar]", total: 30)
puts "Setting Configurations".colorize(:light_magenta)
config.tw_set_config_uint("sale1:period1", period_one)
2.times { bar.advance }
config.tw_set_config_uint("sale1:period2", period_two)
2.times { bar.advance }
config.tw_set_config_uint("sale1:period3", period_three)
2.times { bar.advance }
config.tw_set_config_uint("sale1:end", end_date)
2.times { bar.advance }
config.tw_set_config_uint("sale1:amount", sale_amount)
2.times { bar.advance }
config.tw_set_config_uint("sale1:goal", goal)
2.times { bar.advance }
config.tw_set_config_uint("sale1:famount", founders_amount)
2.times { bar.advance }
config.tw_set_config_address("sale1:fwallet", coinbase)
2.times { bar.advance }
config.tw_set_config_address("sale1:dao", coinbase)
2.times { bar.advance }
config.tw_set_config_uint("sale1:cap", cap)
2.times { bar.advance }
config.tw_set_config_uint("sale1:badgecost", badge_cost)
2.times { bar.advance }
# Post Crowdsale Configs
config.tw_set_config_uint("pledges:minimum", 20)
2.times { bar.advance }
config.tw_set_config_uint("votes:minimum", 100_000)
2.times { bar.advance }
config.tw_set_config_address("provider:address", coinbase)
2.times { bar.advance }
if environment == "production"
  deploy_environment = "mainnet"
end
if environment == "development"
  deploy_environment = "testnet"
end
if environment == "staging"
  deploy_environment = "morden"
end

config.tw_set_config_bytes("environment", deploy_environment)
2.times { bar.advance }

puts "Crowdsale configured start: #{config.c_get_config_uint("sale1:period1").to_s.colorize(:light_blue)}"
puts "Crowdsale configured period 2: #{config.c_get_config_uint("sale1:period2").to_s.colorize(:light_blue)}"
puts "Crowdsale configured period 3: #{config.c_get_config_uint("sale1:period3").to_s.colorize(:light_blue)}"
puts "Crowdsale configured end: #{config.c_get_config_uint("sale1:end").to_s.colorize(:light_blue)}"
puts "Crowdsale configured total DAO tokens: #{config.c_get_config_uint("sale1:amount").to_s.colorize(:light_blue)}"
puts "Crowdsale configured USD goal: #{config.c_get_config_uint("sale1:goal").to_s.colorize(:light_blue)}"
puts "Crowdsale configured USD cap: #{config.c_get_config_uint("sale1:cap").to_s.colorize(:light_blue)}"
puts "Crowdsale configured total DAO tokens for founders: #{config.c_get_config_uint("sale1:famount").to_s.colorize(:light_blue)}"
puts "Crowdsale configured founder wallet: #{config.c_get_config_address("sale1:fwallet").colorize(:light_green)}"
puts "Crowdsale configured Ether Payout Wallet (DAO): #{config.c_get_config_address("sale1:dao").colorize(:light_green)}"
puts "Crowdsale configured Proposer Badge Cost: #{config.c_get_config_uint("sale1:badgecost").to_s.colorize(:light_green)}"
puts "DAO configured Minimum Pledges: #{config.c_get_config_uint("pledges:minimum").to_s.colorize(:light_green)}"
puts "DAO configured Minimum Votes: #{config.c_get_config_uint("votes:minimum").to_s.colorize(:light_green)}"
puts "DAO configured Environment: #{config.c_get_config_bytes("environment").colorize(:green)}"

token_sales = TokenSales.new
token_sales.as(coinbase)
token_sales.set_gas(pi_million)
token_sales.set_gas_price(gas_price)
token_sales.deploy_and_wait(120, config.address)
puts "Deploying Token Sales".colorize(:light_magenta)
config.tw_set_config_address("sale1:address", token_sales.address)
puts "Crowdsale configured token sale contract: #{config.c_get_config_address("sale1:address").colorize(:light_green)}"
puts "Setting default ETH price".colorize(:light_magenta)
token_sales.tw_set_eth_to_cents(1149)
token_ledger = Token.new
token_ledger.as(coinbase)
token_ledger.set_gas(pi_million)
token_ledger.set_gas_price(gas_price)
puts "Deploying Token Ledger".colorize(:light_magenta)
token_ledger.deploy_and_wait(120, config.address)
config.tw_set_config_address("ledger", token_ledger.address)
puts "Crowdsale configured ledger contract: #{config.c_get_config_address("ledger").colorize(:light_green)}"

build_dir = File.join(ENV['PWD'], "build", environment)
FileUtils.rm_rf(build_dir) if Dir.exists?(build_dir)
FileUtils.mkdir_p(build_dir)

def build_contract(contract_name, p, build_dir)
  contract = p.contracts[p.contract_names.index(contract_name)]
  abi_file = File.new(File.join(build_dir, "#{contract_name}.abi"), 'w')
  abi_file.puts JSON.pretty_generate(contract.abi)
  bin_file = File.new(File.join(build_dir, "#{contract_name}.bin"), 'w')
  bin_file.puts contract.binary
  abi_file.close
  bin_file.close
end

puts "Saving Configuration".colorize(:blue)
build_contract("TokenSales", project, build_dir)
build_contract("Config", project, build_dir)
build_contract("Token", project, build_dir)
build_contract("ProxyPayment", project, build_dir)

appconfig = {owner: coinbase, token_sales_address: token_sales.address, config_address: config.address, ledger_address: token_ledger.address}

File.open(File.join(build_dir, "app_config.json"), 'w') do |file|
  file.puts JSON.pretty_generate(appconfig)
end

# DAO Deployment 
dao = Dao.new
dao.as(coinbase)
dao.set_gas(pi_million)
dao.set_gas_price(gas_price)
dao.deploy_and_wait(120, config.address)

rake_cmd = "rake copy_contracts"
puts "Completed deployment.  Please be sure to run #{rake_cmd.colorize(:light_white)} in your application"

if environment == "development"
  accounts = $eth.accounts["result"]
  buyers = accounts[1..20]
  while token_sales.c_get_period == 0
    puts "Waiting for sale period to start..."
    sleep 5
  end
  while (token_sales.c_get_period != 0) && ((token_sales.c_get_sale_info[2] / 100.00) < 5_100_000) && (!token_sales.c_is_ended)
    puts "Performing period #{token_sales.c_get_period} purchases...".colorize(:blue)
    buyers.each do |buyer|
      amount = "0x" + $f.to_wei([SecureRandom.random_number(99), SecureRandom.random_number(2000)].sample, 'ether').to_s(16)
      $eth.send_transaction({from: buyer, to: token_sales.address, value: amount, gas: 200000, gasPrice: gas_price})
    end
    sleep 5
  end
  while (!token_sales.c_is_ended)
    sleep 5
  end
  buyers.each do |buyer|
    token_sales.t_claim_for(buyer)
  end
end

token_sales.as(coinbase)
config.tw_set_config_address("sale1:dao", dao.address)
token_sales.tw_unlock
token_sales.tw_send_funds
badge_ledger = Badge.new
badge_ledger.at(token_ledger.c_badge_ledger)

binding.pry
